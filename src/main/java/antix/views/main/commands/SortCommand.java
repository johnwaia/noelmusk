package antix.views.main.commands;

import antix.model.SocialMediaPost;
import antix.utils.FeedbackUtils;
import antix.utils.GridUtils;
import antix.views.main.PostSelector;

import com.vaadin.flow.component.grid.Grid;

import java.util.List;

/**
 * Commande qui trie les posts par nombre de r√©ponses d√©croissant.
 * Le post ayant le plus de r√©ponses est s√©lectionn√© automatiquement.
 */
public class SortCommand extends Command {
    private final Grid<SocialMediaPost> grid;
    private final PostSelector selector;

    /**
     * Constructeur.
     *
     * @param grid     Grille d'affichage.
     * @param selector Permet d'afficher le post apr√®s tri.
     */
    public SortCommand(Grid<SocialMediaPost> grid, PostSelector selector) {
        super(
                List.of("sort"),
                "Sort",
                """
                üìä sort <replies | reposts | likes>

                üí° Trie les posts par ordre d√©croissant selon le crit√®re choisi :
                    ‚Ä¢ üó®Ô∏è replies : nombre de r√©ponses
                    ‚Ä¢ üîÅ reposts : nombre de repartages
                    ‚Ä¢ ‚ù§Ô∏è likes : nombre de likes
                """
        );
        this.grid = grid;
        this.selector = selector;
    }

    /**
     * Trie les posts par nombre de r√©ponses d√©croissant et s√©lectionne le premier.
     *
     * @param input Non utilis√© ici.
     */
    @Override
    public void execute(String input) {

        String[] inputSplit = input.split(" ");
        if (inputSplit.length < 2) {
            FeedbackUtils.showError("Param√®tre de tri manquant");
            return;
        }
        String param = inputSplit[1];
        List<SocialMediaPost> items = GridUtils.fetchAll(grid);

        switch (param) {
            case "replies":
                items.sort((a, b) -> Integer.compare(b.getRepliesCount(), a.getRepliesCount()));
                break;
            case "reposts":
                items.sort((a, b) -> Integer.compare(b.getShareCount(), a.getShareCount()));
                break;
            case "likes":
                items.sort((a, b) -> Integer.compare(b.getLikeCount(), a.getLikeCount()));
                break;
            default:
                FeedbackUtils.showError("Param√®tre de tri incorrect");
                break;
        }

        grid.setItems(items);

        if (!items.isEmpty()) {
            selector.selectAndDisplay(items.get(0));
        }
    }
}
